"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[353],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7462),r=n(7294),o=n(6010),i=n(2466),s=n(6550),l=n(1980),c=n(7392),u=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,c]=m({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=l??p;return g({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),h(e)}),[c,h,o]),tabValues:o}}var b=n(2389);const f="tabList__CuJ",v="tabItem_LNqP";function k(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==s&&(p(t),l(a))},g=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:g,onClick:d},i,{className:(0,o.Z)("tabs__item",v,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=h(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},5007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),i=n(5162);const s={title:"Introduction"},l=void 0,c={unversionedId:"getting-started/introduction",id:"getting-started/introduction",title:"Introduction",description:"Stashbox and its extensions are distributed via NuGet packages.",source:"@site/docs/getting-started/introduction.md",sourceDirName:"getting-started",slug:"/getting-started/introduction",permalink:"/stashbox/docs/getting-started/introduction",draft:!1,editUrl:"https://github.com/z4kn4fein/stashbox/edit/master/docs/docs/getting-started/introduction.md",tags:[],version:"current",lastUpdatedBy:"Peter Csajtai",lastUpdatedAt:1693928949,formattedLastUpdatedAt:"Sep 5, 2023",frontMatter:{title:"Introduction"},sidebar:"docs",previous:{title:"Overview",permalink:"/stashbox/docs/getting-started/overview"},next:{title:"Glossary",permalink:"/stashbox/docs/getting-started/glossary"}},u={},p=[{value:"Usage",id:"usage",level:2},{value:"How it works?",id:"how-it-works",level:2},{value:"Example",id:"example",level:2}],d={toc:p};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Stashbox and its extensions are distributed via ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages?q=stashbox"},"NuGet")," packages."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Package Manager",label:"Package Manager",mdxType:"TabItem"},(0,r.kt)("p",null,"You can install the package by typing the following into the Package Manager Console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"Install-Package Stashbox -Version 5.12.2\n"))),(0,r.kt)(i.Z,{value:"dotnet CLI",label:"dotnet CLI",mdxType:"TabItem"},(0,r.kt)("p",null,"You can install the package by using the dotnet cli:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package Stashbox --version 5.12.2\n"))),(0,r.kt)(i.Z,{value:"PackageReference",label:"PackageReference",mdxType:"TabItem"},(0,r.kt)("p",null,"You can add the package into the package references of your ",(0,r.kt)("inlineCode",{parentName:"p"},".csproj"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<PackageReference Include="Stashbox" Version="5.12.2" />\n')))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The general idea behind using Stashbox is that you structure your code with loosely coupled components with the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dependency_inversion_principle"},"Dependency Inversion Principle"),", ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Inversion_of_control"},"Inversion Of Control")," and ",(0,r.kt)("a",{parentName:"p",href:"https://martinfowler.com/articles/injection.html"},"Dependency Injection")," in mind. "),(0,r.kt)("p",null,"Rather than letting the services instantiate their dependencies inside themselves, inject the dependencies on construction. Also, rather than creating the object hierarchy manually, you can use a Dependency Injection framework that does the work for you. That's why you are here, I suppose. \ud83d\ude42"),(0,r.kt)("p",null,"To achieve the most efficient usage of Stashbox, you should follow these steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"At the startup of your application, instantiate a ",(0,r.kt)("inlineCode",{parentName:"li"},"StashboxContainer"),"."),(0,r.kt)("li",{parentName:"ul"},"Register your services into the container."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/diagnostics/validation"},"Validate")," the state of the container and the registrations with the ",(0,r.kt)("inlineCode",{parentName:"li"},".Validate()")," method. ",(0,r.kt)("em",{parentName:"li"},"(Optional)")),(0,r.kt)("li",{parentName:"ul"},"During the lifetime of the application, use the container to resolve your services."),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/scopes"},"scopes")," and use them to resolve your services. ",(0,r.kt)("em",{parentName:"li"},"(Optional)")),(0,r.kt)("li",{parentName:"ul"},"On application exit, call the container's ",(0,r.kt)("inlineCode",{parentName:"li"},".Dispose()")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".DisposeAsync()")," method to clean up the resources. ",(0,r.kt)("em",{parentName:"li"},"(Optional)"))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You should create only a single instance from ",(0,r.kt)("inlineCode",{parentName:"p"},"StashboxContainer")," (plus child containers if you use them) per application domain. ",(0,r.kt)("inlineCode",{parentName:"p"},"StashboxContainer")," instances are thread-safe. Do not create new container instances continuously, such action will bypass the container's internal delegate cache and could lead to performance degradation. ")),(0,r.kt)("h2",{id:"how-it-works"},"How it works?"),(0,r.kt)("p",null,"Stashbox builds and maintains a collection of ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/glossary#service-registration--registered-service"},"registered services"),". When a service is requested for resolution, Stashbox starts looking for a matching registration that has the same ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/glossary#service-type--implementation-type"},"service type")," as the type that was requested. If it finds one, the container initiates a scan on the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/glossary#service-type--implementation-type"},"implementation type's")," available constructors and selects the one with the most arguments it knows how to resolve by matching argument types to other registrations."),(0,r.kt)("p",null,"When every constructor argument has a companion registration, Stashbox jumps to the first one and continues the same scanning operation. "),(0,r.kt)("p",null,"This process is repeated until every ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/glossary#injectable-dependency"},"injectable dependency")," has a matching registration in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/glossary#resolution-tree"},"resolution tree"),". At the end of the process, Stashbox will have each dependency node built-up in a hierarchical object structure to instantiate the initially requested service object."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Let's see a quick example. We have three services ",(0,r.kt)("inlineCode",{parentName:"p"},"DbBackup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageBus")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsoleLogger"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"DbBackup")," has a dependency on ",(0,r.kt)("inlineCode",{parentName:"p"},"IEventBroadcaster")," (implemented by ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageBus"),") and ",(0,r.kt)("inlineCode",{parentName:"p"},"ILogger")," (implemented by ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsoleLogger"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageBus")," also depending on an ",(0,r.kt)("inlineCode",{parentName:"p"},"ILogger"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public interface IJob { void DoTheJob(); }\n\npublic interface ILogger { void Log(string message); }\n\npublic interface IEventBroadcaster { void Broadcast(IEvent @event); }\n\n\npublic class ConsoleLogger : ILogger\n{\n    public void Log(string message) => Console.WriteLine(message);\n}\n\npublic class MessageBus : IEventBroadcaster\n{\n    private readonly ILogger logger;\n\n    public MessageBus(ILogger logger)\n    {\n        this.logger = logger;\n    }\n\n    void Broadcast(IEvent @event) \n    {\n        this.logger.Log($"Sending event to bus: {@event.Name}");\n        // Do the actual event broadcast.\n    }\n}\n\npublic class DbBackup : IJob\n{\n    private readonly ILogger logger;\n    private readonly IEventBroadcaster eventBroadcaster;\n\n    public DbBackup(ILogger logger, IEventBroadcaster eventBroadcaster)\n    {\n        this.logger = logger;\n        this.eventBroadcaster = eventBroadcaster;\n    }\n\n    public void DoTheJob() \n    {\n        this.logger.Log("Backing up!");\n        // Do the actual backup.\n        this.eventBroadcaster.Broadcast(new DbBackupCompleted());\n    } \n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"By depending only on interfaces, you decouple your services from concrete implementations. This gives you the flexibility of a more comfortable implementation replacement and also isolates your components from each other. For example, unit testing benefits a lot from the possibility of replacing real implementations with mocks.")),(0,r.kt)("p",null,"The example above configured with Stashbox in a Console Application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"using Stashbox;\nusing System;\n\nnamespace Example\n{\n    public class Program\n    {\n        private static readonly IStashboxContainer container;\n\n        static Program()\n        {\n            // 1. Create container\n            container = new StashboxContainer();\n\n            // 2. Register your services\n            container.RegisterSingleton<ILogger, ConsoleLogger>();\n            container.Register<IEventBroadcaster, MessageBus>();\n            container.Register<IJob, DbBackup>();\n\n            // 3. Validate the configuration.\n            container.Validate();\n        }\n\n        static void Main(string[] args)\n        {\n            // 4. Resolve and use your service\n            var job = container.Resolve<IJob>();\n            job.DoTheJob();\n        }\n    }\n}\n")))}g.isMDXComponent=!0}}]);